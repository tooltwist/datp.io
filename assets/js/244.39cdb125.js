(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{776:function(t,a,s){"use strict";s.r(a);var n=s(60),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_9-external-ids"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-external-ids"}},[t._v("#")]),t._v(" 9 - External IDs")]),t._v(" "),s("p",[t._v("Up to this point we have been getting the status of a transaction using\nthe transaction ID returned by the API call used to start the transaction.")]),t._v(" "),s("p",[t._v("But... what happens if there is a network failure during that initial\ncall? There is no way to know if the transaction started or not, and\nno way to know the transaction ID so we can get the result of the\ntransaction.")]),t._v(" "),s("p",[t._v("To get around this potential scenario, we allow the client to specify\ntheir own unique ID, called an "),s("code",[t._v("externalId")]),t._v(".\nThis is a string up to 32 characters that must be unique.\nIf the client tries to start another transaction with the same\nexternalId an error will bre returned.")]),t._v(" "),s("h2",{attrs:{id:"starting-a-transaction-with-an-externalid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#starting-a-transaction-with-an-externalid"}},[t._v("#")]),t._v(" Starting a transaction with an externalId")]),t._v(" "),s("p",[t._v("In MONDAT, start the "),s("code",[t._v("null")]),t._v(" transaction with an external ID by\nproviding it in the metadata:")]),t._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"metadata"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"reply"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"shortpoll"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"externalID"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc123"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("This should complete as expected.\nIf you then press the "),s("em",[t._v("Run Test")]),t._v(" button a second time you will get an error\nmessage.")]),t._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"code"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Internal"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"message"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error: CANNOT CREATE A DUPLICATE TRANSACTION"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h2",{attrs:{id:"getting-the-status-using-an-externalid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getting-the-status-using-an-externalid"}},[t._v("#")]),t._v(" Getting the status using an externalId")]),t._v(" "),s("p",[t._v("We get the status of a transaction using an externalId in much the same\nway as with using a transaction ID.")]),t._v(" "),s("p",[t._v("In Postman, try the following URLs:")]),t._v(" "),s("p",[s("code",[t._v("http://localhost:33370/datp/1.0/tx/statusByExternalId/abc123")]),t._v("\n       (defaults to shortpoll)\n"),s("code",[t._v("http://localhost:33370/datp/1.0/tx/statusByExternalId/abc123&reply=longpoll")])]),t._v(" "),s("h2",{attrs:{id:"next"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#next"}},[t._v("#")]),t._v(" Next...")]),t._v(" "),s("p",[t._v("In the next section we look at how to call a DATP transaction from\na client application.")])])}),[],!1,null,null,null);a.default=e.exports}}]);