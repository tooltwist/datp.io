(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{612:function(t,e,s){"use strict";s.r(e);var a=s(60),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"reply-converters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reply-converters"}},[t._v("#")]),t._v(" Reply converters")]),t._v(" "),s("p",[t._v("DATP transactions are specifically started by your application.")]),t._v(" "),s("p",[t._v("Typically an application route receives the API request from your client, and\npasses control over to DATP. From that point on, DATP looks after running the\ntransaction and sending status back to the client.")]),t._v(" "),s("p",[t._v("In this flow, your application has the ability to modify the message received\nby the client, before it is passed to DATP. There is no need for the client\nrequest to conform to the DATP message conventions.")]),t._v(" "),s("p",[t._v("A "),s("em",[t._v("reply converter")]),t._v(" gives you an opportunity to similarly modify the reply\nsent back to the client. If the DATP format is appropriate, it is easiest to\njust let DATP reply in\nit's default format. If you wish to return a different type of message, then\nthe reply converter gives you the ability to massage all output sent to the\nclient in polling replies or webho.")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myReplyConverter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("txSummary")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  txSummary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("metadata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hello "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("httpStatus")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("201")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("reply")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" txSummary "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DATP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerReplyConverter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myReplyConverter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("Input to the converter is the standard DATP transaction status object, containing\n"),s("code",[t._v("metadata")]),t._v(", "),s("code",[t._v("data")]),t._v(", and "),s("code",[t._v("progressReport")]),t._v(".\nThe reply converter decides what the send to the client, and provides a status for\nuse if the replying to a status polling request.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("Once registered, your reply converter will be used to translate the reply of all DATP transactions.")]),t._v(" "),s("p",[t._v("A typical first step is to check "),s("code",[t._v("txSummary.metadata.transactionType")]),t._v(" and then\nconvert data as required for the transaction type. If no conversion is required you can simply\nreturn txSummary with status code 200.")])])])}),[],!1,null,null,null);e.default=n.exports}}]);