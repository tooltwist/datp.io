(window.webpackJsonp=window.webpackJsonp||[]).push([[245],{765:function(t,e,s){"use strict";s.r(e);var n=s(60),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"load-testing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#load-testing"}},[t._v("#")]),t._v(" Load testing")]),t._v(" "),s("p",[t._v("In this section we will create a collection of load testing\nscripts based on "),s("a",{attrs:{href:"https://github.com/mcollina/autocannon",target:"_blank",rel:"noopener noreferrer"}},[t._v("Autocannon"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("Autocannon is a super lightweight, but flexible testing framework that runs on NodeJS. With it, we can specify throughtputs,\nnumbers of client connections, test durations, total transactions\nand other factors.")]),t._v(" "),s("p",[t._v("The ability to test out a large number of configurations quickly is essential for working out the dynamics\nof your application.\nDATP gives huge flexibility for controlling and balancing workloads\nthrough it's queueing and multi-node architecture, but every application is different.\nThe best way to understand the real life characteristics of your application is to test.")]),t._v(" "),s("h2",{attrs:{id:"install-the-initial-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#install-the-initial-files"}},[t._v("#")]),t._v(" Install the initial files")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Create a folder "),s("code",[t._v("myProject/util-vsc/loadtest")]),t._v(".")])]),t._v(" "),s("li",[s("p",[t._v("Copy all the files from "),s("code",[t._v("COURSE-FILES/3.1-load-testing")]),t._v(" into this folder.")])]),t._v(" "),s("li",[s("p",[t._v("In a VSCode Terminal run these commands:")])])]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /workspace/myProject/util-vsc/loadtest\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n./1.test-hello.sh\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("This will use 100 connections to ping our original "),s("code",[t._v("/hello/fred")]),t._v("\nroute for 10 seconds. At the end it gives a summary of latency\nand throughput.")]),t._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ node loadtest-hello.js\nBase URL: http://localhost:33370/myProject/1.0/hello/Fred\n  connections: 100\n     duration: 10\n       amount: undefined\n          url: http://localhost:33370/myProject/1.0/hello/Fred\nRunning 10s test @ http://localhost:33370/myProject/1.0/hello/Fred\n100 connections\n\n\n┌─────────┬──────┬──────┬───────┬───────┬─────────┬─────────┬────────┐\n│ Stat    │ 2.5% │ 50%  │ 97.5% │ 99%   │ Avg     │ Stdev   │ Max    │\n├─────────┼──────┼──────┼───────┼───────┼─────────┼─────────┼────────┤\n│ Latency │ 4 ms │ 4 ms │ 23 ms │ 25 ms │ 5.35 ms │ 4.85 ms │ 103 ms │\n└─────────┴──────┴──────┴───────┴───────┴─────────┴─────────┴────────┘\n┌───────────┬─────────┬─────────┬─────────┬─────────┬──────────┬─────────┬─────────┐\n│ Stat      │ 1%      │ 2.5%    │ 50%     │ 97.5%   │ Avg      │ Stdev   │ Min     │\n├───────────┼─────────┼─────────┼─────────┼─────────┼──────────┼─────────┼─────────┤\n│ Req/Sec   │ 8695    │ 8695    │ 21279   │ 22271   │ 17227.28 │ 5196.34 │ 8692    │\n├───────────┼─────────┼─────────┼─────────┼─────────┼──────────┼─────────┼─────────┤\n│ Bytes/Sec │ 2.25 MB │ 2.25 MB │ 5.51 MB │ 5.77 MB │ 4.46 MB  │ 1.35 MB │ 2.25 MB │\n└───────────┴─────────┴─────────┴─────────┴─────────┴──────────┴─────────┴─────────┘\n\nReq/Bytes counts sampled once per second.\n# of samples: 11\n\n190k requests in 11.02s, 49.1 MB read\n\n0 INCORRECT STATUSES\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br")])]),s("p",[t._v("In this case we processed about 190,000 transactions in 10 seconds,\nwhich is pretty good considering everything we are doing - load tester, server, REDIS, database, etc - is running\ninside Docker containers.")]),t._v(" "),s("p",[t._v("Try running the other tests. Note that the results vary considerably,\nbased on the time of the transactions, whether they sleep, and\nwhether their is rate limiting in the load test.")]),t._v(" "),s("h2",{attrs:{id:"look-at-the-code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#look-at-the-code"}},[t._v("#")]),t._v(" Look at the code")]),t._v(" "),s("p",[t._v("For each test there are two parts:")]),t._v(" "),s("ol",[s("li",[t._v("A script that sets the parameters of the test (that can be easily changed), and")]),t._v(" "),s("li",[t._v("The javascript code for the actual test.")])]),t._v(" "),s("p",[t._v("Take a look at "),s("code",[t._v("loadtest-hello.js")]),t._v(", referring to the\n"),s("a",{attrs:{href:"https://github.com/mcollina/autocannon",target:"_blank",rel:"noopener noreferrer"}},[t._v("Autocannon documentation"),s("OutboundLink")],1),t._v("\nif required. The library is pretty simple once you get your head around it.")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("Challenge")]),t._v(" "),s("p",[t._v("Write a test for "),s("code",[t._v("myPipeline")]),t._v(", to send 30 requests a second\nto the server, until 1,000 transactions have been processing.")])])])}),[],!1,null,null,null);e.default=a.exports}}]);