(window.webpackJsonp=window.webpackJsonp||[]).push([[243],{766:function(t,e,s){"use strict";s.r(e);var n=s(60),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_8-polling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-polling"}},[t._v("#")]),t._v(" 8 - Polling")]),t._v(" "),s("p",[t._v("In a regular RESTFUL API framework, and API call that does not return immediately (i.e. within 50ms - 500ms) is considered a big problem, as it jams up the server. An API call that takes minutes to complete will time out on the client.")]),t._v(" "),s("p",[t._v("However, it is completely reasonable that some transactions take a long time to complete. A financial transaction that calls a third party API will take as long as that backend API takes, which is especially a problem if the backend degrades under peak loads. Similarly, a KYC transaction may require manual intervention, so could take hours or days to complete.")]),t._v(" "),s("p",[t._v("To handle these cases, DATP specifically addresses long running transactions. Where possible an immediate reply will be sent to the client, but for longer running transactions DATP provides several options for getting the reply back to the client at a later time.")]),t._v(" "),s("h3",{attrs:{id:"polling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#polling"}},[t._v("#")]),t._v(" Polling")]),t._v(" "),s("p",[t._v("With this approach, the client starts the transaction, and if it is not completed in the reply then the client waits a while and then periodically polls the server for the status of the transaction. It keeps doing this until the transaction is complete.")]),t._v(" "),s("h3",{attrs:{id:"webhook-reply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webhook-reply"}},[t._v("#")]),t._v(" Webhook reply")]),t._v(" "),s("p",[t._v("This is the "),s("em",[t._v("\"don't call us, we'll call you\"")]),t._v(" approach. Rather than the client continually asking the server for the status of the transaction, it provides a URL that the server will call when there is a status change. We'll cover web hooks in a later tutorial.")]),t._v(" "),s("h2",{attrs:{id:"polling-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#polling-options"}},[t._v("#")]),t._v(" Polling Options")]),t._v(" "),s("p",[t._v("Polling involves two steps:")]),t._v(" "),s("ol",[s("li",[t._v("The initial API call to start the transaction, and")]),t._v(" "),s("li",[t._v("Repeat calls to get the transaction status.")])]),t._v(" "),s("p",[t._v("The second group of calls only need to occur if the first call doesn't return a completed status, and only need to repeat until the transaction completes.")]),t._v(" "),s("p",[t._v("There are two types of polling calls. The first is a short poll, where the status is returned immediately. The second is a long poll, where the server waits for a while (usually eight seconds) with the hope that the transaction might complete within that time period.")]),t._v(" "),s("h2",{attrs:{id:"fast-response-versus-machine-resources"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fast-response-versus-machine-resources"}},[t._v("#")]),t._v(" Fast response versus machine resources")]),t._v(" "),s("p",[t._v("Consider two cases:")]),t._v(" "),s("p",[t._v("A) We do a short poll, which returns immediately, then wait 8 seconds before trying again. This places less load on the server, because the server returns immediately. In the worst case the transaction completes slightly after the client polls, but the client won't know about it until it polls again eight seconds later. With a eight second polling interval, there will be an average delay of four seconds between when the transaction completes, and when the client gets the completion status.")]),t._v(" "),s("p",[t._v("B) We do a long poll, which takes eight seconds to return, and then we try again. This places more load on the server, as it needs to hold onto the "),s("code",[t._v("res")]),t._v(" (response) object and watch for a transaction status change. The advantage however is that the server will return immediately if the transaction status changes, and the client gets to know almost immediately.")]),t._v(" "),s("p",[t._v("The choice of which polling strategy to use depends upon how long you expect the transaction to take to complete.")]),t._v(" "),s("p",[t._v("As a rule of thumb, if a transaction is expected to take only one, or a few polling attempts (e.g. less than 30 seconds) before the transaction completes, or if getting the reply is time-critical, then use long polling.")]),t._v(" "),s("p",[t._v("If a transaction is expected to take a while, and is not time critical, then use short polling. The longer the interval between short polls, the less the load on the server.")]),t._v(" "),s("blockquote",[s("p",[t._v("NOTE: Always include a delay between short poll requests. If you\ngo into an un-restricted loop of calling the server, you will unecessarily\noverload the server, and in most frameworks will hit a rate\nlimiter and be blocked.")])]),t._v(" "),s("p",[t._v("C) If a transaction is expected to take an extended time to complete,\nuse a web hook. This takes a little more effort to implement, but minimises\nload on both the client and the server, and ensures that the client gets\nthe reply immediately. It is also resistant to client restarts, which might\ninterupt a polling loop.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Option")]),t._v(" "),s("th",[t._v("Time to run")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("A")]),t._v(" "),s("td",[t._v("< 30 seconds")]),t._v(" "),s("td",[t._v("long poll")])]),t._v(" "),s("tr",[s("td",[t._v("B")]),t._v(" "),s("td",[t._v("< a few minutes")]),t._v(" "),s("td",[t._v("short poll")])]),t._v(" "),s("tr",[s("td",[t._v("C")]),t._v(" "),s("td",[t._v("long running")]),t._v(" "),s("td",[t._v("web hook")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("h2",{attrs:{id:"demonstration-long-running-transaction-with-shortpoll"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#demonstration-long-running-transaction-with-shortpoll"}},[t._v("#")]),t._v(" Demonstration - Long running transaction, with shortpoll")]),t._v(" "),s("p",[t._v("To view the different types of polling we can use MONDAT.\nLet's look at our long running "),s("code",[t._v("myPipeline")]),t._v(",\nwhich takes 30 seconds or more to complete.\nIn the testing page, the default input specifies short polling...")]),t._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"metadata"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"reply"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"shortpoll"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("If we run this test while looking at both MONDAT and the server console,\nwe see a few things:")]),t._v(" "),s("ol",[s("li",[t._v('The response is immediate, with a status of "running".')]),t._v(" "),s("li",[t._v("The polling commences, and the screen jumps to the "),s("em",[t._v("Polling")]),t._v(" tab.")]),t._v(" "),s("li",[t._v("There is a delay between when the transaction completes and when the result is displayed.")])]),t._v(" "),s("h2",{attrs:{id:"demonstration-long-running-transaction-with-longpoll"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#demonstration-long-running-transaction-with-longpoll"}},[t._v("#")]),t._v(" Demonstration - Long running transaction, with longpoll")]),t._v(" "),s("p",[t._v("If we run "),s("code",[t._v("myPipeline")]),t._v(' again, with the input changed to use "longpoll", we see slightly different behaviour:')]),t._v(" "),s("ol",[s("li",[t._v('The initial response takes about eight seconds, but has the same status of "running".')]),t._v(" "),s("li",[t._v("The polling then commences, and the screen jumps to the "),s("em",[t._v("Polling")]),t._v(" tab.")]),t._v(" "),s("li",[t._v("There is NOT a delay between when the transaction completes and when the result is displayed.")])]),t._v(" "),s("h2",{attrs:{id:"demonstration-short-running-transaction-with-shortpoll"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#demonstration-short-running-transaction-with-shortpoll"}},[t._v("#")]),t._v(" Demonstration - Short running transaction, with shortpoll")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("null")]),t._v(" transaction takes less than a second to complete.\nTest it in MONDAT using the default of shortpoll:")]),t._v(" "),s("ol",[s("li",[t._v('The initial response returns immediately, with status "running". It does not wait to see that the transaction completes quickly. The bottom of the\nscreen shows the time for the API call to complete (for example 19ms).')]),t._v(" "),s("li",[t._v('The polling begins and returns pretty quickly with status "success".')])]),t._v(" "),s("h2",{attrs:{id:"demonstration-short-running-transaction-with-longpoll"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#demonstration-short-running-transaction-with-longpoll"}},[t._v("#")]),t._v(" Demonstration - Short running transaction, with longpoll")]),t._v(" "),s("p",[t._v("Try the "),s("code",[t._v("null")]),t._v(" transaction again, this time with longpoll:")]),t._v(" "),s("ol",[s("li",[t._v('The initial response returns, with a status of "success".')]),t._v(" "),s("li",[t._v("It takes longer than the previous shortpoll (e.g. 61ms) because it\nwas waiting (and hoping) for the transaction to complete.")]),t._v(" "),s("li",[t._v("There is no need for polling.")])]),t._v(" "),s("h2",{attrs:{id:"summary"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[t._v("#")]),t._v(" Summary")]),t._v(" "),s("p",[t._v('From the above, we see that long polling gives a better "experience"\nto the client who is running the transaction. The client is promptly\nnotified when the transaction is complete, and in some cases no polling\nis needed.')]),t._v(" "),s("p",[t._v("However...")]),t._v(" "),s("blockquote",[s("p",[t._v("Long polling places strain on the server, because it\nmay have eight seconds or more of requests waiting for replies.\nIf the server is experiencing thousands of requests a second this can be\na big burden.")])]),t._v(" "),s("p",[t._v("Whether you should use shortpoll and longpoll in client requests\nwill depend upon the dynamics of your specific application.\nIf performance and server load are a consideration, then ensure\nthat clients only use longpolls for transactions that will return in\na relatively short period of time.")]),t._v(" "),s("p",[t._v("Under no circumstances do you want thousands of clients long polling the\nserver for hours on end, waiting for long running transactions to complete.")]),t._v(" "),s("h2",{attrs:{id:"status-urls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#status-urls"}},[t._v("#")]),t._v(" Status URLs")]),t._v(" "),s("p",[t._v("The following URLs are used by a client to get the status of a transaction.")]),t._v(" "),s("p",[s("code",[t._v("http://localhost:33370/datp/1.0/tx/status/<txId>")]),t._v("\n       (defaults to shortpoll)\n"),s("code",[t._v("http://localhost:33370/datp/1.0/tx/status/<txId>&reply=longpoll")])]),t._v(" "),s("p",[t._v("In each of these, "),s("code",[t._v("txId")]),t._v(" is the transaction ID returned in the initial\nAPI call that started the transaction.")]),t._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"metadata"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"owner"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"acme"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"txId"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tx-fc4106ac037e37da2fe3ba7f588d5f373ece7d6a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" <=== HERE\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"externalId"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"transactionType"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myPipeline"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"status"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"running"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ...\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"progressReport"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("hr")])}),[],!1,null,null,null);e.default=a.exports}}]);