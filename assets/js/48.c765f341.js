(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{486:function(t,s,a){t.exports=a.p+"assets/img/mondat-wait-step.d1d01752.png"},614:function(t,s,a){"use strict";a.r(s);var e=a(60),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"sleeping"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sleeping"}},[t._v("#")]),t._v(" Sleeping")]),t._v(" "),e("p",[t._v("Sometimes a transaction needs to wait until a certain time, or wait for an external event.")]),t._v(" "),e("p",[t._v("DATP allows a step to put itself to sleep using the "),e("code",[t._v("instance.retryLater")]),t._v(" function.")]),t._v(" "),e("p",[t._v("The step can specify either a time duration, or a "),e("em",[e("strong",[t._v("switch")])]),t._v(" to wait for.")]),t._v(" "),e("h2",{attrs:{id:"waiting-for-a-duration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#waiting-for-a-duration"}},[t._v("#")]),t._v(" Waiting for a duration")]),t._v(" "),e("p",[t._v("A step can put itself to sleep for any time period from seconds up to years.")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sleepDuration "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// seconds")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("retryLater")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sleepDuration"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("With short durations up to a few seconds, DATP will put the worker thread to sleep using nodeJS's "),e("code",[t._v("setTimeout()")]),t._v(" function. This allows fairly fine tuned control of the sleep duration, but when the worker is sleeping in this way it is not available to handle other requests.")]),t._v(" "),e("p",[t._v("For longer duration sleeps we don't want to take workers offline for extended periods or interfere with throughput,\nso instead we record the required wakeup time and event that started the step, and schedule the step to be restarted with this same event later. At the appropriate time DATP's background task will take the event for the step and re-add it to the queue, where the step will be rerun using the first available worker thread.")]),t._v(" "),e("h2",{attrs:{id:"waiting-for-a-switch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#waiting-for-a-switch"}},[t._v("#")]),t._v(" Waiting for a switch")]),t._v(" "),e("p",[t._v("Switches are user defined, and are simply a name given a true or false value.")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nameOfSwitch "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-big-red-switch'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("retryLater")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nameOfSwitch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("The values of switches can be set either programatically, or using MONDAT.")]),t._v(" "),e("p",[t._v("A step can sleep awaiting a switch to be set in much the same way that long duration sleeps are handled.\nThe step and the event data that triggered it are saved, and DATP's background task will requeue the\nevent once the switch is set.")]),t._v(" "),e("h2",{attrs:{id:"use-case-for-switches"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#use-case-for-switches"}},[t._v("#")]),t._v(" Use case for switches")]),t._v(" "),e("p",[t._v("A typical use case might be when a step calls a backend API that run a transaction asynchronously\nand returns it's status using a webhook. You can handle this")]),t._v(" "),e("p",[t._v("In your step:")]),t._v(" "),e("blockquote",[e("ol",[e("li",[t._v("Call the backend API to start the transaction.")]),t._v(" "),e("li",[t._v("Wait for switch X.\n(the step goes to sleep here)")]),t._v(" "),e("li",[t._v("Get the transaction status from the backend.")]),t._v(" "),e("li",[t._v("Do any other processing required, and return.")])])]),t._v(" "),e("p",[t._v("In your route that handles the webhook reply from the backend:")]),t._v(" "),e("blockquote",[e("ol",[e("li",[t._v("Set switch X")])])]),t._v(" "),e("p",[t._v("This simple approach allows long running steps to move themselves off to the side\nfor hours or days without consuming machine resources.")]),t._v(" "),e("h2",{attrs:{id:"re-running-events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#re-running-events"}},[t._v("#")]),t._v(" Re-running events")]),t._v(" "),e("p",[t._v('Steps cannot actually stop and sleep midway through the step, then resume hours or days\nlater, because this would take the worker thread offline fdor anm extended period.\nInstead, you code your steps to tell DATP "call me back later...".')]),t._v(" "),e("p",[t._v("When a step starts, it can determine how many times it has been retried, of if this is the first\ntime it has been run. As an example, here is pseudocode for the use case above...")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyStep")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Step")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("instance")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If this is the first time in, start the transaction")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" retry "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRetryCounter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("retry "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" Start the transaction on the backend "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" switchName "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'backend-complete'")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" instance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("retryLater")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("switchName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The switch must have been set")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" Get the transaction status from the backend "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" backendStatus "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" output "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" backendStatus\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" instance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("succeeded")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Transaction completed'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" output"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br")])]),e("p",[t._v("You will need to find a way for the webhook called by the backend to know which of our\ntransactions has been completed.")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("webhookOrPollingFunction")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" owner "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Application dependant - comes from yor credentials")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" transactionId "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" switchName "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'backend-complete'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" Transaction"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setSwitch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OWNER")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" transactionId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" switchName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("h2",{attrs:{id:"wait-step"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#wait-step"}},[t._v("#")]),t._v(" Wait Step")]),t._v(" "),e("p",[t._v("Another approach that requires minimal coding, is to insert the "),e("code",[t._v("util/wait")]),t._v(" step into a pipeline. This step will continue to sleep until the transaction switch is set. You will still need to provide the way the switch gets set, for example using code as above.")]),t._v(" "),e("p",[e("img",{attrs:{src:a(486),alt:"DATP Node"}})]),t._v(" "),e("h2",{attrs:{id:"fault-tolerance"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fault-tolerance"}},[t._v("#")]),t._v(" Fault tolerance")]),t._v(" "),e("p",[t._v("For sleeps of more than a few seconds, and with switches, DAPT works across server and node failures. This means that you can safely use it to schedule future events, by having a pipeline that puts itself to sleep until the required time.")]),t._v(" "),e("p",[t._v("The transaction may have an incomplete status for an extended period of time, but\nit places zero load upon the system.")])])}),[],!1,null,null,null);s.default=n.exports}}]);